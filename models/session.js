// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Session = sequelize.define('session', {
    price: {
      type: DataTypes.DOUBLE,
      allowNull: false,
    },
    nbCourses: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    startTime: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    endTime: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    createdAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
    updatedAt: {
      type: DataTypes.DATE,
      defaultValue: Sequelize.literal('now()'),
    },
  }, {
    tableName: 'session',
    underscored: true,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Session.associate = (models) => {
    Session.belongsTo(models.coach, {
      foreignKey: {
        name: 'coachIdKey',
        field: 'coach_id',
      },
      as: 'coach',
    });
    Session.belongsTo(models.sessionType, {
      foreignKey: {
        name: 'sessionTypeIdKey',
        field: 'session_type_id',
      },
      as: 'sessionType',
    });
    Session.belongsToMany(models.user, {
      through: 'sessionUser',
      foreignKey: 'session_id',
      otherKey: 'user_id',
      as: 'userThroughSessionUsers',
    });
    Session.hasMany(models.sessionCourse, {
      foreignKey: {
        name: 'sessionIdKey',
        field: 'session_id',
      },
      as: 'sessionCourses',
    });
    Session.hasMany(models.comment, {
      foreignKey: {
        name: 'sessionIdKey',
        field: 'session_id',
      },
      as: 'comments',
    });
  };

  return Session;
};
